@document.meta
title: neovim config
description: 
authors: jan
categories: 
created: 2023-05-18
updated: 2023-05-18
version: 1.1.1
tangle: ./generated/nvim/init.lua
@end

* General Settings
** Scrolling

   Move with a bit of space between the border and the cursor.

   @code lua
   vim.opt.scrolloff = 4
   @end

** Line numbers

   Enable line numbers.

   @code lua
   vim.opt.number = true
   @end

** Tabs and Spaces

   Indentation settings for tabs and spaces.

   @code lua
   vim.opt.shiftwidth = 2
   vim.opt.tabstop = 2
   vim.opt.expandtab = true
   vim.opt.smartindent = true
   @end

** Cursorline

   Enable line highlighting.

   @code lua
   vim.opt.cursorline = true
   @end

** Leader and LocalLeader

   Set leader and localleader both equal to space.

   @code lua
   vim.g.mapleader = " "
   vim.g.maplocalleader = " "
   @end

** Truecolor support

   Enable truecolor support.

   @code lua
   vim.opt.termguicolors = true
   @end

* Keymappings
** ESC

   Bind `jk` in insert mode to ESC.

   @code lua
   vim.keymap.set("i", "jk", "<ESC>")
   @end

** Tab cycling

   Allows to cycle through open buffer via `tab`.

   @code lua
   vim.keymap.set("n", "<Tab>", ":bn<CR>")
   vim.keymap.set("n", "<C-Tab>", ":bp<CR>")
   @end

** Disable search highlights

   Map ESC so highlights will be disabled.

   @code lua
   vim.keymap.set("n", "<ESC>", "<ESC>:nohl<CR>")
   @end


** Telescope 

   `<leader>f` is used for telescope mappings.

   @code lua
   vim.keymap.set("n", "<leader>ff", ":Telescope find_files<CR>")
   vim.keymap.set("n", "<leader>fg", ":Telescope live_grep<CR>")
   vim.keymap.set("n", "<leader>fb", ":Telescope buffers<CR>")
   vim.keymap.set("n", "<leader>fh", ":Telescope help_tags<CR>")
   vim.keymap.set("n", "<leader>fo", ":Telescope oldfiles<CR>")
   @end

** Neorg

   `<leader>n` is used for neorg mappings.

   @code lua
   vim.keymap.set("n", "<leader>nn", ":Neorg keybind norg core.dirman.new.note<CR>")
   vim.keymap.set("n", "<leader>nt", ":Neorg tangle current-file<CR>")
   @end

* Lazy Plugin Manager

  Bootstrap the lazy plugin manager (Gets automatically installed).
  For more info visit {https://github.com/folke/lazy.nvim}.

  @code lua
  local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
  if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
      "git",
      "clone",
      "--filter=blob:none",
      "https://github.com/folke/lazy.nvim.git",
      "--branch=stable", -- latest stable release
      lazypath,
    })
  end
  vim.opt.rtp:prepend(lazypath)
  @end

** Plugins

   Create a table containing all the plugin configuration.

   @code lua
   local plugins = {
   @end

*** Mason

    Can install lsp servers.

    @code lua
    {
      "williamboman/mason.nvim",
      config = true,
      build = ":MasonUpdate" -- :MasonUpdate updates registry contents
    },
    @end

*** Mason-LspConfig

    Mason interop with lspconfig.

    @code lua
    {
      "williamboman/mason-lspconfig.nvim",
      config = true,
    },
    @end

*** lspconfig

    Neovim Lsp client interface.
    Enabled lsp servers:
    - rust-analyzer
    - clangd
    - lua_ls

    @code lua
    {
      "neovim/nvim-lspconfig",
      config = function()
        local lspconfig = require("lspconfig")
        lspconfig.lua_ls.setup({})
        lspconfig.clangd.setup({})
        lspconfig.rust_analyzer.setup({})
      end
    },
    @end

*** Nvim Surround

    Allows to add, remove or replace brackets etc.

    @code lua
    {
      "kylechui/nvim-surround",
      version = "*", -- Use for stability; omit to use `main` branch for the latest features
      event = "VeryLazy",
      config = true,
    },
    @end

*** Telescope

    Find files, switch buffers etc.

    @code lua
    {
      "nvim-telescope/telescope.nvim",
      tag = "0.1.1",
      dependencies = { "nvim-lua/plenary.nvim" },
    },
    @end

*** Tokyonight color scheme

    Pretty self-explanatory. A nice color scheme.

    @code lua
    {   
      "folke/tokyonight.nvim",
      config = function()
        vim.cmd.colorscheme("tokyonight-storm")
      end,
    },
    @end


*** Lualine

    A better statusline for neovim.

    @code lua
    {
      "nvim-lualine/lualine.nvim",
      -- Also use tokyonight theme here :)
      opts = { 
        options = { theme = "tokyonight" },
        sections = { 
          lualine_c = {
            "lsp_progress"
          }
        }
      },
      dependencies = { "nvim-tree/nvim-web-devicons" }
    },
    @end

*** Treesitter

    Better syntax highlighting.

    @code lua
    {
      "nvim-treesitter/nvim-treesitter",
      build = ":TSUpdate",
      main = "nvim-treesitter.configs",
      opts = {
        ensure_installed = { "c", "lua", "vim", "vimdoc", "query" },
        sync_install = false,
        auto_install = true,
        highlight = {
          enable = true,
          additional_vim_regex_highlighting = false,
        }
      }
    },
    @end

*** Neorg

    The best plugin of them all, in which this file is written in.
    Allows for nice organized text editing.

    @code lua
    {   
      "nvim-neorg/neorg",
      build = ":Neorg sync-parsers",
      opts = {
        load = {
          ["core.defaults"] = {}, -- Loads default behaviour
          ["core.concealer"] = {}, -- Adds pretty icons to your documents
          ["core.tangle"] = {}, -- Add tangling support
          ["core.esupports.metagen"] = { -- Automatically sync document meta
            config = {
              type = "auto",
            }
          },
          ["core.dirman"] = { -- Manages Neorg workspaces
            config = {
              workspaces = {
                dotfiles = "~/linux-dotfiles"
              },
            },
          },
        },
      },
      dependencies = { 
        "nvim-lua/plenary.nvim"
      },
    },
    @end

*** Which Key

    Displays all mapped key combinations while typing.

    @code lua
    {
      "folke/which-key.nvim",
      config = true,
    },
    @end
    ---

   @code lua
   }
   @end

   Then include all configured plugins.

   @code lua
   require("lazy").setup(plugins)
   @end
